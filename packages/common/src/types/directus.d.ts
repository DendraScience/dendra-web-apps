/**
 * This file was auto-generated by openapi-typescript.
 * Do not make direct changes to the file.
 */


export interface paths {
  "/assets/{id}": {
    /**
     * Get an Asset
     * @description Image typed files can be dynamically resized and transformed to fit any need.
     */
    get: operations["getAsset"];
  };
  "/auth/login": {
    /**
     * Retrieve a Temporary Access Token
     * @description Retrieve a Temporary Access Token
     */
    post: operations["login"];
  };
  "/auth/refresh": {
    /**
     * Refresh Token
     * @description Refresh a Temporary Access Token.
     */
    post: operations["refresh"];
  };
  "/auth/logout": {
    /**
     * Log Out
     * @description Log Out
     */
    post: operations["logout"];
  };
  "/auth/password/request": {
    /**
     * Request a Password Reset
     * @description Request a reset password email to be send.
     */
    post: operations["passwordRequest"];
  };
  "/auth/password/reset": {
    /**
     * Reset a Password
     * @description The request a password reset endpoint sends an email with a link to the admin app which in turn uses this endpoint to allow the user to reset their password.
     */
    post: operations["passwordReset"];
  };
  "/auth/oauth": {
    /**
     * List OAuth Providers
     * @description List configured OAuth providers.
     */
    get: operations["oauth"];
  };
  "/auth/oauth/{provider}": {
    /**
     * Authenticated using an OAuth provider
     * @description Start OAuth flow using the specified provider
     */
    get: operations["oauthProvider"];
  };
  "/server/info": {
    /**
     * System Info
     * @description Perform a system status check and return the options.
     */
    get: operations["serverInfo"];
  };
  "/server/ping": {
    /**
     * Ping
     * @description Ping, pong. Ping.. pong.
     */
    get: operations["ping"];
  };
  "/utils/hash/generate": {
    /**
     * Hash a string
     * @description Generate a hash for a given string.
     */
    post: operations["hash-generate"];
  };
  "/utils/hash/verify": {
    /**
     * Hash a string
     * @description Generate a hash for a given string.
     */
    post: operations["hash-verify"];
  };
  "/utils/sort/{collection}": {
    /**
     * Sort Items
     * @description Re-sort items in collection based on start and to value of item
     */
    post: operations["sort"];
  };
  "/utils/import/{collection}": {
    /**
     * Import Items
     * @description Import multiple records from a JSON or CSV file into a collection.
     */
    post: operations["import"];
  };
  "/utils/export/{collection}": {
    /**
     * Export Items
     * @description Export a larger data set to a file in the File Library
     */
    post: operations["export"];
  };
  "/utils/cache/clear": {
    /**
     * Clear Cache
     * @description Resets both the data and schema cache of Directus.
     */
    post: operations["clear-cache"];
  };
  "/utils/random/string": {
    /**
     * Get a Random String
     * @description Returns a random string of given length.
     */
    get: operations["random"];
  };
  "/fields": {
    /**
     * List All Fields
     * @description Returns a list of the fields available in the project.
     */
    get: operations["getFields"];
  };
  "/fields/{collection}": {
    /**
     * List Fields in Collection
     * @description Returns a list of the fields available in the given collection.
     */
    get: operations["getCollectionFields"];
  };
  "/fields/{collection}/{id}": {
    /**
     * Retrieve a Field
     * @description Retrieves the details of a single field in a given collection.
     */
    get: operations["getCollectionField"];
  };
  "/collections": {
    /**
     * List Collections
     * @description Returns a list of the collections available in the project.
     */
    get: operations["getCollections"];
  };
  "/collections/{id}": {
    /**
     * Retrieve a Collection
     * @description Retrieves the details of a single collection.
     */
    get: operations["getCollection"];
  };
  "/files": {
    /**
     * List Files
     * @description List the files.
     */
    get: operations["getFiles"];
  };
  "/files/{id}": {
    /**
     * Retrieve a Files
     * @description Retrieve a single file by unique identifier.
     */
    get: operations["getFile"];
  };
  "/relations": {
    /**
     * List Relations
     * @description List the relations.
     */
    get: operations["getRelations"];
  };
  "/relations/{id}": {
    /**
     * Retrieve a Relation
     * @description Retrieve a single relation by unique identifier.
     */
    get: operations["getRelation"];
  };
  "/items/ctas": {
    /**
     * List Items
     * @description List the ctas items.
     */
    get: operations["readItemsCtas"];
  };
  "/items/ctas/{id}": {
    /**
     * Retrieve an Item
     * @description Retrieve a single ctas item by unique identifier.
     */
    get: operations["readSingleItemsCtas"];
  };
  "/items/meta_infos": {
    /**
     * List Items
     * @description List the meta_infos items.
     */
    get: operations["readItemsMetaInfos"];
  };
  "/items/meta_infos/{id}": {
    /**
     * Retrieve an Item
     * @description Retrieve a single meta_infos item by unique identifier.
     */
    get: operations["readSingleItemsMetaInfos"];
  };
  "/items/section_hero_ctas": {
    /**
     * List Items
     * @description List the section_hero_ctas items.
     */
    get: operations["readItemsSectionHeroCtas"];
  };
  "/items/section_hero_ctas/{id}": {
    /**
     * Retrieve an Item
     * @description Retrieve a single section_hero_ctas item by unique identifier.
     */
    get: operations["readSingleItemsSectionHeroCtas"];
  };
  "/items/section_hero": {
    /**
     * List Items
     * @description List the section_hero items.
     */
    get: operations["readItemsSectionHero"];
  };
  "/items/section_hero/{id}": {
    /**
     * Retrieve an Item
     * @description Retrieve a single section_hero item by unique identifier.
     */
    get: operations["readSingleItemsSectionHero"];
  };
  "/items/image_transformations": {
    /**
     * List Items
     * @description List the image_transformations items.
     */
    get: operations["readItemsImageTransformations"];
  };
  "/items/image_transformations/{id}": {
    /**
     * Retrieve an Item
     * @description Retrieve a single image_transformations item by unique identifier.
     */
    get: operations["readSingleItemsImageTransformations"];
  };
  "/items/static_pages_sections": {
    /**
     * List Items
     * @description List the static_pages_sections items.
     */
    get: operations["readItemsStaticPagesSections"];
  };
  "/items/static_pages_sections/{id}": {
    /**
     * Retrieve an Item
     * @description Retrieve a single static_pages_sections item by unique identifier.
     */
    get: operations["readSingleItemsStaticPagesSections"];
  };
  "/items/section_differentiators": {
    /**
     * List Items
     * @description List the section_differentiators items.
     */
    get: operations["readItemsSectionDifferentiators"];
  };
  "/items/section_differentiators/{id}": {
    /**
     * Retrieve an Item
     * @description Retrieve a single section_differentiators item by unique identifier.
     */
    get: operations["readSingleItemsSectionDifferentiators"];
  };
  "/items/differentiators": {
    /**
     * List Items
     * @description List the differentiators items.
     */
    get: operations["readItemsDifferentiators"];
  };
  "/items/differentiators/{id}": {
    /**
     * Retrieve an Item
     * @description Retrieve a single differentiators item by unique identifier.
     */
    get: operations["readSingleItemsDifferentiators"];
  };
  "/items/static_pages": {
    /**
     * List Items
     * @description List the static_pages items.
     */
    get: operations["readItemsStaticPages"];
  };
  "/items/static_pages/{id}": {
    /**
     * Retrieve an Item
     * @description Retrieve a single static_pages item by unique identifier.
     */
    get: operations["readSingleItemsStaticPages"];
  };
  "/items/section_capabilities": {
    /**
     * List Items
     * @description List the section_capabilities items.
     */
    get: operations["readItemsSectionCapabilities"];
  };
  "/items/section_capabilities/{id}": {
    /**
     * Retrieve an Item
     * @description Retrieve a single section_capabilities item by unique identifier.
     */
    get: operations["readSingleItemsSectionCapabilities"];
  };
  "/items/section_capabilities_capabilities": {
    /**
     * List Items
     * @description List the section_capabilities_capabilities items.
     */
    get: operations["readItemsSectionCapabilitiesCapabilities"];
  };
  "/items/section_capabilities_capabilities/{id}": {
    /**
     * Retrieve an Item
     * @description Retrieve a single section_capabilities_capabilities item by unique identifier.
     */
    get: operations["readSingleItemsSectionCapabilitiesCapabilities"];
  };
  "/items/capabilities": {
    /**
     * List Items
     * @description List the capabilities items.
     */
    get: operations["readItemsCapabilities"];
  };
  "/items/capabilities/{id}": {
    /**
     * Retrieve an Item
     * @description Retrieve a single capabilities item by unique identifier.
     */
    get: operations["readSingleItemsCapabilities"];
  };
  "/items/section_differentiators_differentiators": {
    /**
     * List Items
     * @description List the section_differentiators_differentiators items.
     */
    get: operations["readItemsSectionDifferentiatorsDifferentiators"];
  };
  "/items/section_differentiators_differentiators/{id}": {
    /**
     * Retrieve an Item
     * @description Retrieve a single section_differentiators_differentiators item by unique identifier.
     */
    get: operations["readSingleItemsSectionDifferentiatorsDifferentiators"];
  };
  "/items/case_studies": {
    /**
     * List Items
     * @description List the case_studies items.
     */
    get: operations["readItemsCaseStudies"];
  };
  "/items/case_studies/{id}": {
    /**
     * Retrieve an Item
     * @description Retrieve a single case_studies item by unique identifier.
     */
    get: operations["readSingleItemsCaseStudies"];
  };
  "/items/tours": {
    /**
     * List Items
     * @description List the tours items.
     */
    get: operations["readItemsTours"];
  };
  "/items/tours/{id}": {
    /**
     * Retrieve an Item
     * @description Retrieve a single tours item by unique identifier.
     */
    get: operations["readSingleItemsTours"];
  };
  "/items/section_case_studies_case_studies": {
    /**
     * List Items
     * @description List the section_case_studies_case_studies items.
     */
    get: operations["readItemsSectionCaseStudiesCaseStudies"];
  };
  "/items/section_case_studies_case_studies/{id}": {
    /**
     * Retrieve an Item
     * @description Retrieve a single section_case_studies_case_studies item by unique identifier.
     */
    get: operations["readSingleItemsSectionCaseStudiesCaseStudies"];
  };
  "/items/section_tours": {
    /**
     * List Items
     * @description List the section_tours items.
     */
    get: operations["readItemsSectionTours"];
  };
  "/items/section_tours/{id}": {
    /**
     * Retrieve an Item
     * @description Retrieve a single section_tours item by unique identifier.
     */
    get: operations["readSingleItemsSectionTours"];
  };
  "/items/section_case_studies": {
    /**
     * List Items
     * @description List the section_case_studies items.
     */
    get: operations["readItemsSectionCaseStudies"];
  };
  "/items/section_case_studies/{id}": {
    /**
     * Retrieve an Item
     * @description Retrieve a single section_case_studies item by unique identifier.
     */
    get: operations["readSingleItemsSectionCaseStudies"];
  };
  "/items/section_tours_tours": {
    /**
     * List Items
     * @description List the section_tours_tours items.
     */
    get: operations["readItemsSectionToursTours"];
  };
  "/items/section_tours_tours/{id}": {
    /**
     * Retrieve an Item
     * @description Retrieve a single section_tours_tours item by unique identifier.
     */
    get: operations["readSingleItemsSectionToursTours"];
  };
  "/items/tours_ctas": {
    /**
     * List Items
     * @description List the tours_ctas items.
     */
    get: operations["readItemsToursCtas"];
  };
  "/items/tours_ctas/{id}": {
    /**
     * Retrieve an Item
     * @description Retrieve a single tours_ctas item by unique identifier.
     */
    get: operations["readSingleItemsToursCtas"];
  };
}

export type webhooks = Record<string, never>;

export interface components {
  schemas: {
    Files: {
      /**
       * @description Unique identifier for the file.
       * @example 8cbb43fe-4cdf-4991-8352-c461779cec02
       */
      id?: string;
      /**
       * @description Where the file is stored. Either `local` for the local filesystem or the name of the storage adapter (for example `s3`).
       * @example local
       */
      storage?: string;
      /**
       * @description Name of the file on disk. By default, Directus uses a random hash for the filename.
       * @example a88c3b72-ac58-5436-a4ec-b2858531333a.jpg
       */
      filename_disk?: string;
      /**
       * @description How you want to the file to be named when it's being downloaded.
       * @example avatar.jpg
       */
      filename_download?: string;
      /**
       * @description Title for the file. Is extracted from the filename on upload, but can be edited by the user.
       * @example User Avatar
       */
      title?: string;
      /**
       * @description MIME type of the file.
       * @example image/jpeg
       */
      type?: string;
      /**
       * @description Virtual folder where this file resides in.
       * @example null
       */
      folder?: string | components["schemas"]["Folders"] | null;
      /**
       * @description Who uploaded the file.
       * @example 63716273-0f29-4648-8a2a-2af2948f6f78
       */
      uploaded_by?: string | components["schemas"]["Users"];
      /**
       * Format: date-time
       * @description When the file was uploaded.
       * @example 2019-12-03T00:10:15+00:00
       */
      uploaded_on?: string;
      /** Format: uuid */
      modified_by?: string | null;
      /** Format: timestamp */
      modified_on?: string;
      /**
       * @description Character set of the file.
       * @example binary
       */
      charset?: string | null;
      /**
       * @description Size of the file in bytes.
       * @example 137862
       */
      filesize?: number;
      /**
       * @description Width of the file in pixels. Only applies to images.
       * @example 800
       */
      width?: number | null;
      /**
       * @description Height of the file in pixels. Only applies to images.
       * @example 838
       */
      height?: number | null;
      /**
       * @description Duration of the file in seconds. Only applies to audio and video.
       * @example 0
       */
      duration?: number | null;
      /**
       * @description Where the file was embedded from.
       * @example null
       */
      embed?: string | null;
      /** @description Description for the file. */
      description?: string | null;
      /** @description Where the file was created. Is automatically populated based on Exif data for images. */
      location?: string | null;
      /** @description Tags for the file. Is automatically populated based on Exif data for images. */
      tags?: string[] | null;
      /** @description IPTC, Exif, and ICC metadata extracted from file */
      metadata?: Record<string, unknown> | null;
      focal_point_x?: number | null;
      focal_point_y?: number | null;
    };
    Folders: {
      /**
       * @description Unique identifier for the folder.
       * @example 0cf0e03d-4364-45df-b77b-ca61f61869d2
       */
      id?: string;
      /**
       * @description Name of the folder.
       * @example New York
       */
      name?: string;
      /**
       * @description Unique identifier of the parent folder. This allows for nested folders.
       * @example null
       */
      parent?: string | components["schemas"]["Folders"] | null;
    };
    Roles: {
      /**
       * @description Unique identifier for the role.
       * @example 2f24211d-d928-469a-aea3-3c8f53d4e426
       */
      id?: string;
      /**
       * @description Name of the role.
       * @example Administrator
       */
      name?: string;
      /**
       * @description The role's icon.
       * @example verified_user
       */
      icon?: string;
      /**
       * @description Description of the role.
       * @example Admins have access to all managed data within the system by default
       */
      description?: string | null;
      /**
       * @description Array of IP addresses that are allowed to connect to the API as a user of this role.
       * @example []
       */
      ip_access?: string[];
      /**
       * @description Whether or not this role enforces the use of 2FA.
       * @example false
       */
      enforce_tfa?: boolean;
      /**
       * @description Admin role. If true, skips all permission checks.
       * @example false
       */
      admin_access?: boolean;
      /**
       * @description The users in the role are allowed to use the app.
       * @example true
       */
      app_access?: boolean;
    };
    Users: {
      /**
       * @description Unique identifier for the user.
       * @example 63716273-0f29-4648-8a2a-2af2948f6f78
       */
      id?: string;
      /**
       * @description First name of the user.
       * @example Admin
       */
      first_name?: string;
      /**
       * @description Last name of the user.
       * @example User
       */
      last_name?: string;
      /**
       * Format: email
       * @description Unique email address for the user.
       * @example admin@example.com
       */
      email?: string;
      /** @description Password of the user. */
      password?: string;
      /**
       * @description The user's location.
       * @example null
       */
      location?: string | null;
      /**
       * @description The user's title.
       * @example null
       */
      title?: string | null;
      /**
       * @description The user's description.
       * @example null
       */
      description?: string | null;
      /**
       * @description The user's tags.
       * @example null
       */
      tags?: string[] | null;
      /**
       * @description The user's avatar.
       * @example null
       */
      avatar?: string | components["schemas"]["Files"] | null;
      /**
       * @description The user's language used in Directus.
       * @example en-US
       */
      language?: string;
      /**
       * @description What theme the user is using.
       * @example auto
       * @enum {string}
       */
      theme?: "light" | "dark" | "auto";
      /**
       * @description The 2FA secret string that's used to generate one time passwords.
       * @example null
       */
      tfa_secret?: string | null;
      /**
       * @description Status of the user.
       * @example active
       * @enum {string}
       */
      status?: "active" | "invited" | "draft" | "suspended" | "deleted";
      /**
       * @description Unique identifier of the role of this user.
       * @example 2f24211d-d928-469a-aea3-3c8f53d4e426
       */
      role?: string | components["schemas"]["Roles"];
      /** @description Static token for the user. */
      token?: string | null;
      /**
       * Format: date-time
       * @description When this user used the API last.
       * @example 2020-05-31T14:32:37Z
       */
      last_access?: string | null;
      /**
       * @description Last page that the user was on.
       * @example /my-project/settings/collections/a
       */
      last_page?: string | null;
    };
    Query: {
      /**
       * @description Control what fields are being returned in the object.
       * @example [
       *   "*",
       *   "*.*"
       * ]
       */
      fields?: string[];
      /**
       * @example {
       *   "<field>": {
       *     "<operator>": "<value>"
       *   }
       * }
       */
      filter?: Record<string, never>;
      /** @description Filter by items that contain the given search query in one of their fields. */
      search?: string;
      /**
       * @description How to sort the returned items.
       * @example [
       *   "-date_created"
       * ]
       */
      sort?: string[];
      /** @description Set the maximum number of items that will be returned */
      limit?: number;
      /** @description How many items to skip when fetching data. */
      offset?: number;
      /** @description Cursor for use in pagination. Often used in combination with limit. */
      page?: number;
      /**
       * @description Deep allows you to set any of the other query parameters on a nested relational dataset.
       * @example {
       *   "related_articles": {
       *     "_limit": 3
       *   }
       * }
       */
      deep?: Record<string, never>;
    };
    "x-metadata": {
      /** @description Returns the total item count of the collection you're querying. */
      total_count?: number;
      /** @description Returns the item count of the collection you're querying, taking the current filter/search parameters into account. */
      filter_count?: number;
    };
    Fields: {
      id?: number;
      /**
       * @description Unique name of the collection this field is in.
       * @example about_us
       */
      collection?: string;
      /**
       * @description Unique name of the field. Field name is unique within the collection.
       * @example id
       */
      field?: string;
      special?: string[] | null;
      interface?: string | null;
      options?: unknown;
      display?: string | null;
      display_options?: unknown;
      readonly?: boolean;
      hidden?: boolean;
      sort?: number | null;
      width?: string | null;
      translations?: unknown;
      note?: string | null;
      conditions?: unknown;
      required?: boolean | null;
      group?: number | components["schemas"]["Fields"] | null;
      validation?: unknown;
      validation_message?: string | null;
    };
    Collections: {
      /**
       * @description The collection key.
       * @example customers
       */
      collection?: string;
      icon?: string | null;
      note?: string | null;
      display_template?: string | null;
      hidden?: boolean;
      singleton?: boolean;
      translations?: unknown;
      archive_field?: string | null;
      archive_app_filter?: boolean;
      archive_value?: string | null;
      unarchive_value?: string | null;
      sort_field?: string | null;
      accountability?: string | null;
      color?: string | null;
      item_duplication_fields?: unknown;
      sort?: number | null;
      group?: string | components["schemas"]["Collections"] | null;
      collapse?: string;
      preview_url?: string | null;
      versioning?: boolean;
    };
    Relations: {
      /**
       * @description Unique identifier for the relation.
       * @example 1
       */
      id?: number;
      /**
       * @description Collection that has the field that holds the foreign key.
       * @example directus_activity
       */
      many_collection?: string;
      /**
       * @description Foreign key. Field that holds the primary key of the related collection.
       * @example user
       */
      many_field?: string;
      /**
       * @description Collection on the _one_ side of the relationship.
       * @example directus_users
       */
      one_collection?: string;
      /**
       * @description Alias column that serves as the _one_ side of the relationship.
       * @example null
       */
      one_field?: string | null;
      one_collection_field?: string | null;
      one_allowed_collections?: string[] | null;
      /**
       * @description Field on the junction table that holds the many field of the related relation.
       * @example null
       */
      junction_field?: string | null;
      sort_field?: string | null;
      one_deselect_action?: string;
    };
    ItemsCtas: {
      id?: number;
      status?: string;
      /** Format: uuid */
      user_created?: string | null;
      /** Format: timestamp */
      date_created?: string | null;
      /** Format: uuid */
      user_updated?: string | null;
      /** Format: timestamp */
      date_updated?: string | null;
      action?: string | null;
      href?: string | null;
      title?: string | null;
    };
    ItemsMetaInfos: {
      id?: number;
      /** Format: uuid */
      user_created?: string | null;
      /** Format: timestamp */
      date_created?: string | null;
      /** Format: uuid */
      user_updated?: string | null;
      /** Format: timestamp */
      date_updated?: string | null;
      title?: string | null;
      description?: string | null;
      og_title?: string | null;
      og_description?: string | null;
      og_image?: string | components["schemas"]["Files"] | null;
    };
    ItemsSectionHeroCtas: {
      id?: number;
      section_hero_id?: number | components["schemas"]["ItemsSectionHero"] | null;
      ctas_id?: number | components["schemas"]["ItemsCtas"] | null;
    };
    ItemsSectionHero: {
      id?: number;
      status?: string;
      /** Format: uuid */
      user_created?: string | null;
      /** Format: timestamp */
      date_created?: string | null;
      /** Format: uuid */
      user_updated?: string | null;
      /** Format: timestamp */
      date_updated?: string | null;
      title?: string | null;
      paragraph?: string | null;
      background_image?: string | components["schemas"]["Files"] | null;
      background_transformation?: number | components["schemas"]["ItemsImageTransformations"] | null;
      ctas?: ((number | components["schemas"]["ItemsSectionHeroCtas"])[]) | null;
    };
    ItemsImageTransformations: {
      id?: number;
      /** Format: uuid */
      user_created?: string | null;
      /** Format: timestamp */
      date_created?: string | null;
      /** Format: uuid */
      user_updated?: string | null;
      /** Format: timestamp */
      date_updated?: string | null;
      name?: string;
      cloudinary_parameters?: string | null;
    };
    ItemsStaticPagesSections: {
      id?: number;
      static_pages_id?: string | components["schemas"]["ItemsStaticPages"] | null;
      item?: ((string | components["schemas"]["ItemsSectionHero"] | components["schemas"]["ItemsSectionDifferentiators"] | components["schemas"]["ItemsSectionCapabilities"] | components["schemas"]["ItemsSectionTours"] | components["schemas"]["ItemsSectionCaseStudies"])[]) | null;
      collection?: string | null;
      sort?: number | null;
    };
    ItemsSectionDifferentiators: {
      id?: number;
      status?: string;
      /** Format: uuid */
      user_created?: string | null;
      /** Format: timestamp */
      date_created?: string | null;
      /** Format: uuid */
      user_updated?: string | null;
      /** Format: timestamp */
      date_updated?: string | null;
      title?: string | null;
      paragraph?: string | null;
      differentiators?: ((number | components["schemas"]["ItemsSectionDifferentiatorsDifferentiators"])[]) | null;
    };
    ItemsDifferentiators: {
      id?: number;
      status?: string;
      /** Format: uuid */
      user_created?: string | null;
      /** Format: timestamp */
      date_created?: string | null;
      /** Format: uuid */
      user_updated?: string | null;
      /** Format: timestamp */
      date_updated?: string | null;
      title?: string | null;
      description?: string | null;
      icon?: string | null;
    };
    ItemsStaticPages: {
      /** Format: uuid */
      id?: string;
      status?: string;
      /** Format: uuid */
      user_created?: string | null;
      /** Format: timestamp */
      date_created?: string | null;
      /** Format: uuid */
      user_updated?: string | null;
      /** Format: timestamp */
      date_updated?: string | null;
      meta_info?: number | components["schemas"]["ItemsMetaInfos"] | null;
      name?: string | null;
      sections?: ((number | components["schemas"]["ItemsStaticPagesSections"])[]) | null;
    };
    ItemsSectionCapabilities: {
      id?: number;
      status?: string;
      /** Format: uuid */
      user_created?: string | null;
      /** Format: timestamp */
      date_created?: string | null;
      /** Format: uuid */
      user_updated?: string | null;
      /** Format: timestamp */
      date_updated?: string | null;
      title?: string | null;
      paragraph?: string | null;
      capabilities?: ((number | components["schemas"]["ItemsSectionCapabilitiesCapabilities"])[]) | null;
    };
    ItemsSectionCapabilitiesCapabilities: {
      id?: number;
      section_capabilities_id?: number | components["schemas"]["ItemsSectionCapabilities"] | null;
      capabilities_id?: number | components["schemas"]["ItemsCapabilities"] | null;
      sort?: number | null;
    };
    ItemsCapabilities: {
      id?: number;
      status?: string;
      /** Format: uuid */
      user_created?: string | null;
      /** Format: timestamp */
      date_created?: string | null;
      /** Format: uuid */
      user_updated?: string | null;
      /** Format: timestamp */
      date_updated?: string | null;
      title?: string | null;
      description?: string | null;
      icon?: string | null;
      image?: string | components["schemas"]["Files"] | null;
      transformation?: number | components["schemas"]["ItemsImageTransformations"] | null;
    };
    ItemsSectionDifferentiatorsDifferentiators: {
      id?: number;
      section_differentiators_id?: number | components["schemas"]["ItemsSectionDifferentiators"] | null;
      differentiators_id?: number | components["schemas"]["ItemsDifferentiators"] | null;
      sort?: number | null;
    };
    ItemsCaseStudies: {
      id?: number;
      status?: string;
      /** Format: uuid */
      user_created?: string | null;
      /** Format: timestamp */
      date_created?: string | null;
      /** Format: uuid */
      user_updated?: string | null;
      /** Format: timestamp */
      date_updated?: string | null;
      title?: string | null;
      summary?: string | null;
      body?: string | null;
      cover_image?: string | components["schemas"]["Files"] | null;
      cover_transformation?: number | components["schemas"]["ItemsImageTransformations"] | null;
    };
    ItemsTours: {
      id?: number;
      status?: string;
      /** Format: uuid */
      user_created?: string | null;
      /** Format: timestamp */
      date_created?: string | null;
      /** Format: uuid */
      user_updated?: string | null;
      /** Format: timestamp */
      date_updated?: string | null;
      title?: string | null;
      description?: string | null;
      ctas?: ((number | components["schemas"]["ItemsToursCtas"])[]) | null;
    };
    ItemsSectionCaseStudiesCaseStudies: {
      id?: number;
      section_case_studies_id?: number | components["schemas"]["ItemsSectionCaseStudies"] | null;
      case_studies_id?: number | components["schemas"]["ItemsCaseStudies"] | null;
      sort?: number | null;
    };
    ItemsSectionTours: {
      id?: number;
      status?: string;
      /** Format: uuid */
      user_created?: string | null;
      /** Format: timestamp */
      date_created?: string | null;
      /** Format: uuid */
      user_updated?: string | null;
      /** Format: timestamp */
      date_updated?: string | null;
      title?: string | null;
      paragraph?: string | null;
      tours?: ((number | components["schemas"]["ItemsSectionToursTours"])[]) | null;
    };
    ItemsSectionCaseStudies: {
      id?: number;
      status?: string;
      /** Format: uuid */
      user_created?: string | null;
      /** Format: timestamp */
      date_created?: string | null;
      /** Format: uuid */
      user_updated?: string | null;
      /** Format: timestamp */
      date_updated?: string | null;
      title?: string | null;
      paragraph?: string | null;
      case_studies?: ((number | components["schemas"]["ItemsSectionCaseStudiesCaseStudies"])[]) | null;
    };
    ItemsSectionToursTours: {
      id?: number;
      section_tours_id?: number | components["schemas"]["ItemsSectionTours"] | null;
      tours_id?: number | components["schemas"]["ItemsTours"] | null;
      sort?: number | null;
    };
    ItemsToursCtas: {
      id?: number;
      tours_id?: number | components["schemas"]["ItemsTours"] | null;
      ctas_id?: number | components["schemas"]["ItemsCtas"] | null;
      sort?: number | null;
    };
  };
  responses: {
    /** @description Error: Not found. */
    NotFoundError: {
      content: {
        "application/json": {
          error?: {
            /** Format: int64 */
            code?: number;
            message?: string;
          };
        };
      };
    };
    /** @description Error: Unauthorized request */
    UnauthorizedError: {
      content: {
        "application/json": {
          error?: {
            /** Format: int64 */
            code?: number;
            message?: string;
          };
        };
      };
    };
  };
  parameters: {
    /** @description Index */
    Id: number;
    /** @description Unique identifier for the object. */
    UUId: string;
    /** @description Collection of which you want to retrieve the items from. */
    Collection: string;
    /** @description Filter by items that contain the given search query in one of their fields. */
    Search?: string;
    /** @description Cursor for use in pagination. Often used in combination with limit. */
    Page?: number;
    /** @description How many items to skip when fetching data. */
    Offset?: number;
    /** @description How to sort the returned items. `sort` is a CSV of fields used to sort the fetched items. Sorting defaults to ascending (ASC) order but a minus sign (` - `) can be used to reverse this to descending (DESC) order. Fields are prioritized by their order in the CSV. You can also use a ` ? ` to sort randomly. */
    Sort?: string[];
    /** @description What metadata to return in the response. */
    Meta?: string;
    /** @description A limit on the number of objects that are returned. */
    Limit?: number;
    /** @description Select items in collection by given conditions. */
    Filter?: string;
    /** @description Control what fields are being returned in the object. */
    Fields?: string[];
    /** @description Saves the API response to a file. Accepts one of "csv", "json", "xml", "yaml". */
    Export?: "csv" | "json" | "xml" | "yaml";
    /** @description Retrieve an item's state from a specific Content Version. The value corresponds to the "key" of the Content Version. */
    Version?: string;
  };
  requestBodies: never;
  headers: never;
  pathItems: never;
}

export type $defs = Record<string, never>;

export type external = Record<string, never>;

export interface operations {

  /**
   * Get an Asset
   * @description Image typed files can be dynamically resized and transformed to fit any need.
   */
  getAsset: {
    parameters: {
      query?: {
        /** @description The key of the asset size configured in settings. */
        key?: string;
        /** @description A JSON array of image transformations */
        transforms?: string;
        /** @description Download the asset to your computer */
        download?: boolean;
      };
      path: {
        /** @description The id of the file. */
        id: string;
      };
    };
    responses: {
      /** @description Successful request */
      200: {
        content: {
          "text/plain": string;
        };
      };
      404: components["responses"]["NotFoundError"];
    };
  };
  /**
   * Retrieve a Temporary Access Token
   * @description Retrieve a Temporary Access Token
   */
  login: {
    requestBody?: {
      content: {
        "application/json": {
          /**
           * @description Email address of the user you're retrieving the access token for.
           * @example admin@example.com
           */
          email: string;
          /**
           * Format: password
           * @description Password of the user.
           * @example password
           */
          password: string;
          /**
           * @description Whether to retrieve the refresh token in the JSON response, or in a httpOnly cookie.
           * @default json
           * @enum {string}
           */
          mode?: "json" | "cookie" | "session";
          /** @description The user's one-time-password (if MFA is enabled). */
          otp?: string;
        };
      };
    };
    responses: {
      /** @description Successful authentification */
      200: {
        content: {
          "application/json": {
            data?: {
              /** @example eyJhbGciOiJI... */
              access_token?: string;
              /** @example 900 */
              expires?: number;
              /** @example yuOJkjdPXMd... */
              refresh_token?: string;
            };
          };
        };
      };
    };
  };
  /**
   * Refresh Token
   * @description Refresh a Temporary Access Token.
   */
  refresh: {
    requestBody?: {
      content: {
        "application/json": {
          /**
           * @description JWT access token you want to refresh. This token can't be expired.
           * @example eyJ0eXAiOiJKV...
           */
          refresh_token?: string;
          /**
           * @description Whether to submit and retrieve the refresh token in the JSON response, or in a httpOnly cookie.
           * @default json
           * @enum {string}
           */
          mode?: "json" | "cookie" | "session";
        };
      };
    };
    responses: {
      /** @description Successful request */
      200: {
        content: {
          "application/json": {
            data?: {
              /** @example eyJhbGciOiJI... */
              access_token?: string;
              /** @example 900 */
              expires?: number;
              /** @example Gy-caJMpmGTA... */
              refresh_token?: string;
            };
          };
        };
      };
      401: components["responses"]["UnauthorizedError"];
    };
  };
  /**
   * Log Out
   * @description Log Out
   */
  logout: {
    requestBody?: {
      content: {
        "application/json": {
          /**
           * @description The refresh token to invalidate. If you have the refresh token in a cookie through /auth/login, you don't have to submit it here.
           * @example eyJ0eXAiOiJKV...
           */
          refresh_token?: string;
          /**
           * @description Whether the refresh token is submitted in the JSON response, or in a httpOnly cookie.
           * @enum {string}
           */
          mode?: "json" | "cookie" | "session";
        };
      };
    };
    responses: {
      /** @description Request successful */
      200: {
        content: never;
      };
    };
  };
  /**
   * Request a Password Reset
   * @description Request a reset password email to be send.
   */
  passwordRequest: {
    requestBody?: {
      content: {
        "application/json": {
          /**
           * @description Email address of the user you're requesting a reset for.
           * @example admin@example.com
           */
          email: string;
        };
      };
    };
    responses: {
      401: components["responses"]["UnauthorizedError"];
    };
  };
  /**
   * Reset a Password
   * @description The request a password reset endpoint sends an email with a link to the admin app which in turn uses this endpoint to allow the user to reset their password.
   */
  passwordReset: {
    requestBody?: {
      content: {
        "application/json": {
          /**
           * @description One-time use JWT token that is used to verify the user.
           * @example eyJ0eXAiOiJKV1Qi...
           */
          token: string;
          /**
           * Format: password
           * @description New password for the user.
           * @example password
           */
          password: string;
        };
      };
    };
    responses: {
      401: components["responses"]["UnauthorizedError"];
    };
  };
  /**
   * List OAuth Providers
   * @description List configured OAuth providers.
   */
  oauth: {
    responses: {
      /** @description Successful request */
      200: {
        content: {
          "application/json": {
            public?: boolean;
            /**
             * @example [
             *   "github",
             *   "facebook"
             * ]
             */
            data?: string[];
          };
        };
      };
      401: components["responses"]["UnauthorizedError"];
    };
  };
  /**
   * Authenticated using an OAuth provider
   * @description Start OAuth flow using the specified provider
   */
  oauthProvider: {
    parameters: {
      query?: {
        /** @description Where to redirect on successful login.<br/>If set the authentication details are set inside cookies otherwise a JSON is returned. */
        redirect?: string;
      };
      path: {
        /** @description Key of the activated OAuth provider. */
        provider: string;
      };
    };
    responses: {
      /** @description Successful request */
      200: {
        content: {
          "application/json": {
            public?: boolean;
            data?: {
              token?: string;
            };
          };
        };
      };
      401: components["responses"]["UnauthorizedError"];
    };
  };
  /**
   * System Info
   * @description Perform a system status check and return the options.
   */
  serverInfo: {
    parameters: {
      query: {
        /** @description The first time you create a project, the provided token will be saved and required for subsequent project installs. It can also be found and configured in `/config/__api.json` on your server. */
        super_admin_token: number;
      };
    };
    responses: {
      /** @description Successful request */
      200: {
        content: {
          "application/json": {
            data?: Record<string, never>;
          };
        };
      };
      401: components["responses"]["UnauthorizedError"];
      404: components["responses"]["NotFoundError"];
    };
  };
  /**
   * Ping
   * @description Ping, pong. Ping.. pong.
   */
  ping: {
    responses: {
      /** @description Successful request */
      200: {
        content: {
          "application/text": string;
        };
      };
    };
  };
  /**
   * Hash a string
   * @description Generate a hash for a given string.
   */
  "hash-generate": {
    requestBody?: {
      content: {
        "application/json": {
          /** @description String to hash. */
          string: string;
        };
      };
    };
    responses: {
      /** @description Successful request */
      200: {
        content: {
          "application/json": {
            /** @example $argon2i$v=19$m=4096,t=3,p=1$pOyIa/zmRAjCVLb2f7kOyg$DasoO6LzMM+6iKfzCDq6JbsYsZWLSm33p7i9NxL9mDc */
            data?: string;
          };
        };
      };
    };
  };
  /**
   * Hash a string
   * @description Generate a hash for a given string.
   */
  "hash-verify": {
    requestBody?: {
      content: {
        "application/json": {
          /** @description String to hash. */
          string: string;
          /** @description Hash you want to verify against. */
          hash: string;
        };
      };
    };
    responses: {
      /** @description Successful request */
      200: {
        content: {
          "application/json": {
            /** @example true */
            data?: boolean;
          };
        };
      };
    };
  };
  /**
   * Sort Items
   * @description Re-sort items in collection based on start and to value of item
   */
  sort: {
    parameters: {
      path: {
        /** @description Collection identifier */
        collection: string;
      };
    };
    requestBody?: {
      content: {
        "application/json": {
          /** @description Primary key of item to move */
          item?: number;
          /** @description Primary key of item where to move the current item to */
          to?: number;
        };
      };
    };
    responses: {
      /** @description Successful request */
      200: {
        content: never;
      };
    };
  };
  /**
   * Import Items
   * @description Import multiple records from a JSON or CSV file into a collection.
   */
  import: {
    parameters: {
      path: {
        /** @description Collection identifier */
        collection: string;
      };
    };
    requestBody?: {
      content: {
        "multipart/form-data": {
          /** Format: binary */
          file?: string;
        };
      };
    };
    responses: {
      /** @description Successful request */
      200: {
        content: never;
      };
    };
  };
  /**
   * Export Items
   * @description Export a larger data set to a file in the File Library
   */
  export: {
    parameters: {
      path: {
        /** @description Collection identifier */
        collection: string;
      };
    };
    requestBody?: {
      content: {
        "application/json": {
          /**
           * @description What file format to save the export to. One of csv, xml, json
           * @enum {string}
           */
          format: "csv" | "xml" | "json";
          query: components["schemas"]["Query"];
          file: components["schemas"]["Files"];
        };
      };
    };
    responses: {
      /** @description Successful request */
      200: {
        content: never;
      };
    };
  };
  /**
   * Clear Cache
   * @description Resets both the data and schema cache of Directus.
   */
  "clear-cache": {
    responses: {
      /** @description Successful request */
      200: {
        content: never;
      };
    };
  };
  /**
   * Get a Random String
   * @description Returns a random string of given length.
   */
  random: {
    parameters: {
      query?: {
        /** @description Length of the random string. */
        length?: number;
      };
    };
    responses: {
      /** @description Successful request */
      200: {
        content: {
          "application/json": {
            /** @example 1>M3+4oh.S */
            data?: string;
          };
        };
      };
    };
  };
  /**
   * List All Fields
   * @description Returns a list of the fields available in the project.
   */
  getFields: {
    parameters: {
      query?: {
        limit?: components["parameters"]["Limit"];
        sort?: components["parameters"]["Sort"];
      };
    };
    responses: {
      /** @description Successful request */
      200: {
        content: {
          "application/json": {
            data?: components["schemas"]["Fields"][];
          };
        };
      };
      401: components["responses"]["UnauthorizedError"];
      404: components["responses"]["NotFoundError"];
    };
  };
  /**
   * List Fields in Collection
   * @description Returns a list of the fields available in the given collection.
   */
  getCollectionFields: {
    parameters: {
      query?: {
        sort?: components["parameters"]["Sort"];
      };
      path: {
        /** @description Unique identifier of the collection the item resides in. */
        collection: string;
      };
    };
    responses: {
      /** @description Successful request */
      200: {
        content: {
          "application/json": {
            data?: components["schemas"]["Fields"][];
          };
        };
      };
      401: components["responses"]["UnauthorizedError"];
      404: components["responses"]["NotFoundError"];
    };
  };
  /**
   * Retrieve a Field
   * @description Retrieves the details of a single field in a given collection.
   */
  getCollectionField: {
    parameters: {
      path: {
        /** @description Unique identifier of the collection the item resides in. */
        collection: string;
        /** @description Unique identifier of the field. */
        id: string;
      };
    };
    responses: {
      /** @description Successful request */
      200: {
        content: {
          "application/json": {
            data?: components["schemas"]["Fields"];
          };
        };
      };
      401: components["responses"]["UnauthorizedError"];
      404: components["responses"]["NotFoundError"];
    };
  };
  /**
   * List Collections
   * @description Returns a list of the collections available in the project.
   */
  getCollections: {
    parameters: {
      query?: {
        offset?: components["parameters"]["Offset"];
        meta?: components["parameters"]["Meta"];
      };
    };
    responses: {
      /** @description Successful request */
      200: {
        content: {
          "application/json": {
            data?: components["schemas"]["Collections"][];
          };
        };
      };
      401: components["responses"]["UnauthorizedError"];
      404: components["responses"]["NotFoundError"];
    };
  };
  /**
   * Retrieve a Collection
   * @description Retrieves the details of a single collection.
   */
  getCollection: {
    parameters: {
      query?: {
        meta?: components["parameters"]["Meta"];
      };
      path: {
        /** @description Unique identifier of the collection. */
        id: string;
      };
    };
    responses: {
      /** @description Successful request */
      200: {
        content: {
          "application/json": {
            data?: components["schemas"]["Collections"];
          };
        };
      };
      401: components["responses"]["UnauthorizedError"];
      404: components["responses"]["NotFoundError"];
    };
  };
  /**
   * List Files
   * @description List the files.
   */
  getFiles: {
    parameters: {
      query?: {
        fields?: components["parameters"]["Fields"];
        limit?: components["parameters"]["Limit"];
        offset?: components["parameters"]["Offset"];
        sort?: components["parameters"]["Sort"];
        filter?: components["parameters"]["Filter"];
        search?: components["parameters"]["Search"];
        meta?: components["parameters"]["Meta"];
      };
    };
    responses: {
      /** @description Successful request */
      200: {
        content: {
          "application/json": {
            data?: components["schemas"]["Files"][];
            meta?: components["schemas"]["x-metadata"];
          };
        };
      };
      401: components["responses"]["UnauthorizedError"];
    };
  };
  /**
   * Retrieve a Files
   * @description Retrieve a single file by unique identifier.
   */
  getFile: {
    parameters: {
      query?: {
        fields?: components["parameters"]["Fields"];
        meta?: components["parameters"]["Meta"];
      };
      path: {
        id: components["parameters"]["UUId"];
      };
    };
    responses: {
      /** @description Successful request */
      200: {
        content: {
          "application/json": {
            data?: components["schemas"]["Files"];
          };
        };
      };
      401: components["responses"]["UnauthorizedError"];
    };
  };
  /**
   * List Relations
   * @description List the relations.
   */
  getRelations: {
    parameters: {
      query?: {
        fields?: components["parameters"]["Fields"];
        limit?: components["parameters"]["Limit"];
        offset?: components["parameters"]["Offset"];
        meta?: components["parameters"]["Meta"];
        sort?: components["parameters"]["Sort"];
        filter?: components["parameters"]["Filter"];
        search?: components["parameters"]["Search"];
        page?: components["parameters"]["Page"];
      };
    };
    responses: {
      /** @description Successful request */
      200: {
        content: {
          "application/json": {
            data?: components["schemas"]["Relations"][];
          };
        };
      };
      401: components["responses"]["UnauthorizedError"];
      404: components["responses"]["NotFoundError"];
    };
  };
  /**
   * Retrieve a Relation
   * @description Retrieve a single relation by unique identifier.
   */
  getRelation: {
    parameters: {
      query?: {
        fields?: components["parameters"]["Fields"];
        meta?: components["parameters"]["Meta"];
      };
      path: {
        id: components["parameters"]["Id"];
      };
    };
    responses: {
      /** @description Successful request */
      200: {
        content: {
          "application/json": {
            data?: components["schemas"]["Relations"];
          };
        };
      };
      401: components["responses"]["UnauthorizedError"];
      404: components["responses"]["NotFoundError"];
    };
  };
  /**
   * List Items
   * @description List the ctas items.
   */
  readItemsCtas: {
    parameters: {
      query?: {
        fields?: components["parameters"]["Fields"];
        limit?: components["parameters"]["Limit"];
        meta?: components["parameters"]["Meta"];
        offset?: components["parameters"]["Offset"];
        sort?: components["parameters"]["Sort"];
        filter?: components["parameters"]["Filter"];
        search?: components["parameters"]["Search"];
      };
    };
    responses: {
      /** @description Successful request */
      200: {
        content: {
          "application/json": {
            data?: components["schemas"]["ItemsCtas"][];
            meta?: components["schemas"]["x-metadata"];
          };
        };
      };
      401: components["responses"]["UnauthorizedError"];
    };
  };
  /**
   * Retrieve an Item
   * @description Retrieve a single ctas item by unique identifier.
   */
  readSingleItemsCtas: {
    parameters: {
      query?: {
        fields?: components["parameters"]["Fields"];
        meta?: components["parameters"]["Meta"];
        version?: components["parameters"]["Version"];
      };
      path: {
        /** @description Index of the item. */
        id: number | string;
      };
    };
    responses: {
      /** @description Successful request */
      200: {
        content: {
          "application/json": {
            data?: components["schemas"]["ItemsCtas"];
          };
        };
      };
      401: components["responses"]["UnauthorizedError"];
      404: components["responses"]["NotFoundError"];
    };
  };
  /**
   * List Items
   * @description List the meta_infos items.
   */
  readItemsMetaInfos: {
    parameters: {
      query?: {
        fields?: components["parameters"]["Fields"];
        limit?: components["parameters"]["Limit"];
        meta?: components["parameters"]["Meta"];
        offset?: components["parameters"]["Offset"];
        sort?: components["parameters"]["Sort"];
        filter?: components["parameters"]["Filter"];
        search?: components["parameters"]["Search"];
      };
    };
    responses: {
      /** @description Successful request */
      200: {
        content: {
          "application/json": {
            data?: components["schemas"]["ItemsMetaInfos"][];
            meta?: components["schemas"]["x-metadata"];
          };
        };
      };
      401: components["responses"]["UnauthorizedError"];
    };
  };
  /**
   * Retrieve an Item
   * @description Retrieve a single meta_infos item by unique identifier.
   */
  readSingleItemsMetaInfos: {
    parameters: {
      query?: {
        fields?: components["parameters"]["Fields"];
        meta?: components["parameters"]["Meta"];
        version?: components["parameters"]["Version"];
      };
      path: {
        /** @description Index of the item. */
        id: number | string;
      };
    };
    responses: {
      /** @description Successful request */
      200: {
        content: {
          "application/json": {
            data?: components["schemas"]["ItemsMetaInfos"];
          };
        };
      };
      401: components["responses"]["UnauthorizedError"];
      404: components["responses"]["NotFoundError"];
    };
  };
  /**
   * List Items
   * @description List the section_hero_ctas items.
   */
  readItemsSectionHeroCtas: {
    parameters: {
      query?: {
        fields?: components["parameters"]["Fields"];
        limit?: components["parameters"]["Limit"];
        meta?: components["parameters"]["Meta"];
        offset?: components["parameters"]["Offset"];
        sort?: components["parameters"]["Sort"];
        filter?: components["parameters"]["Filter"];
        search?: components["parameters"]["Search"];
      };
    };
    responses: {
      /** @description Successful request */
      200: {
        content: {
          "application/json": {
            data?: components["schemas"]["ItemsSectionHeroCtas"][];
            meta?: components["schemas"]["x-metadata"];
          };
        };
      };
      401: components["responses"]["UnauthorizedError"];
    };
  };
  /**
   * Retrieve an Item
   * @description Retrieve a single section_hero_ctas item by unique identifier.
   */
  readSingleItemsSectionHeroCtas: {
    parameters: {
      query?: {
        fields?: components["parameters"]["Fields"];
        meta?: components["parameters"]["Meta"];
        version?: components["parameters"]["Version"];
      };
      path: {
        /** @description Index of the item. */
        id: number | string;
      };
    };
    responses: {
      /** @description Successful request */
      200: {
        content: {
          "application/json": {
            data?: components["schemas"]["ItemsSectionHeroCtas"];
          };
        };
      };
      401: components["responses"]["UnauthorizedError"];
      404: components["responses"]["NotFoundError"];
    };
  };
  /**
   * List Items
   * @description List the section_hero items.
   */
  readItemsSectionHero: {
    parameters: {
      query?: {
        fields?: components["parameters"]["Fields"];
        limit?: components["parameters"]["Limit"];
        meta?: components["parameters"]["Meta"];
        offset?: components["parameters"]["Offset"];
        sort?: components["parameters"]["Sort"];
        filter?: components["parameters"]["Filter"];
        search?: components["parameters"]["Search"];
      };
    };
    responses: {
      /** @description Successful request */
      200: {
        content: {
          "application/json": {
            data?: components["schemas"]["ItemsSectionHero"][];
            meta?: components["schemas"]["x-metadata"];
          };
        };
      };
      401: components["responses"]["UnauthorizedError"];
    };
  };
  /**
   * Retrieve an Item
   * @description Retrieve a single section_hero item by unique identifier.
   */
  readSingleItemsSectionHero: {
    parameters: {
      query?: {
        fields?: components["parameters"]["Fields"];
        meta?: components["parameters"]["Meta"];
        version?: components["parameters"]["Version"];
      };
      path: {
        /** @description Index of the item. */
        id: number | string;
      };
    };
    responses: {
      /** @description Successful request */
      200: {
        content: {
          "application/json": {
            data?: components["schemas"]["ItemsSectionHero"];
          };
        };
      };
      401: components["responses"]["UnauthorizedError"];
      404: components["responses"]["NotFoundError"];
    };
  };
  /**
   * List Items
   * @description List the image_transformations items.
   */
  readItemsImageTransformations: {
    parameters: {
      query?: {
        fields?: components["parameters"]["Fields"];
        limit?: components["parameters"]["Limit"];
        meta?: components["parameters"]["Meta"];
        offset?: components["parameters"]["Offset"];
        sort?: components["parameters"]["Sort"];
        filter?: components["parameters"]["Filter"];
        search?: components["parameters"]["Search"];
      };
    };
    responses: {
      /** @description Successful request */
      200: {
        content: {
          "application/json": {
            data?: components["schemas"]["ItemsImageTransformations"][];
            meta?: components["schemas"]["x-metadata"];
          };
        };
      };
      401: components["responses"]["UnauthorizedError"];
    };
  };
  /**
   * Retrieve an Item
   * @description Retrieve a single image_transformations item by unique identifier.
   */
  readSingleItemsImageTransformations: {
    parameters: {
      query?: {
        fields?: components["parameters"]["Fields"];
        meta?: components["parameters"]["Meta"];
        version?: components["parameters"]["Version"];
      };
      path: {
        /** @description Index of the item. */
        id: number | string;
      };
    };
    responses: {
      /** @description Successful request */
      200: {
        content: {
          "application/json": {
            data?: components["schemas"]["ItemsImageTransformations"];
          };
        };
      };
      401: components["responses"]["UnauthorizedError"];
      404: components["responses"]["NotFoundError"];
    };
  };
  /**
   * List Items
   * @description List the static_pages_sections items.
   */
  readItemsStaticPagesSections: {
    parameters: {
      query?: {
        fields?: components["parameters"]["Fields"];
        limit?: components["parameters"]["Limit"];
        meta?: components["parameters"]["Meta"];
        offset?: components["parameters"]["Offset"];
        sort?: components["parameters"]["Sort"];
        filter?: components["parameters"]["Filter"];
        search?: components["parameters"]["Search"];
      };
    };
    responses: {
      /** @description Successful request */
      200: {
        content: {
          "application/json": {
            data?: components["schemas"]["ItemsStaticPagesSections"][];
            meta?: components["schemas"]["x-metadata"];
          };
        };
      };
      401: components["responses"]["UnauthorizedError"];
    };
  };
  /**
   * Retrieve an Item
   * @description Retrieve a single static_pages_sections item by unique identifier.
   */
  readSingleItemsStaticPagesSections: {
    parameters: {
      query?: {
        fields?: components["parameters"]["Fields"];
        meta?: components["parameters"]["Meta"];
        version?: components["parameters"]["Version"];
      };
      path: {
        /** @description Index of the item. */
        id: number | string;
      };
    };
    responses: {
      /** @description Successful request */
      200: {
        content: {
          "application/json": {
            data?: components["schemas"]["ItemsStaticPagesSections"];
          };
        };
      };
      401: components["responses"]["UnauthorizedError"];
      404: components["responses"]["NotFoundError"];
    };
  };
  /**
   * List Items
   * @description List the section_differentiators items.
   */
  readItemsSectionDifferentiators: {
    parameters: {
      query?: {
        fields?: components["parameters"]["Fields"];
        limit?: components["parameters"]["Limit"];
        meta?: components["parameters"]["Meta"];
        offset?: components["parameters"]["Offset"];
        sort?: components["parameters"]["Sort"];
        filter?: components["parameters"]["Filter"];
        search?: components["parameters"]["Search"];
      };
    };
    responses: {
      /** @description Successful request */
      200: {
        content: {
          "application/json": {
            data?: components["schemas"]["ItemsSectionDifferentiators"][];
            meta?: components["schemas"]["x-metadata"];
          };
        };
      };
      401: components["responses"]["UnauthorizedError"];
    };
  };
  /**
   * Retrieve an Item
   * @description Retrieve a single section_differentiators item by unique identifier.
   */
  readSingleItemsSectionDifferentiators: {
    parameters: {
      query?: {
        fields?: components["parameters"]["Fields"];
        meta?: components["parameters"]["Meta"];
        version?: components["parameters"]["Version"];
      };
      path: {
        /** @description Index of the item. */
        id: number | string;
      };
    };
    responses: {
      /** @description Successful request */
      200: {
        content: {
          "application/json": {
            data?: components["schemas"]["ItemsSectionDifferentiators"];
          };
        };
      };
      401: components["responses"]["UnauthorizedError"];
      404: components["responses"]["NotFoundError"];
    };
  };
  /**
   * List Items
   * @description List the differentiators items.
   */
  readItemsDifferentiators: {
    parameters: {
      query?: {
        fields?: components["parameters"]["Fields"];
        limit?: components["parameters"]["Limit"];
        meta?: components["parameters"]["Meta"];
        offset?: components["parameters"]["Offset"];
        sort?: components["parameters"]["Sort"];
        filter?: components["parameters"]["Filter"];
        search?: components["parameters"]["Search"];
      };
    };
    responses: {
      /** @description Successful request */
      200: {
        content: {
          "application/json": {
            data?: components["schemas"]["ItemsDifferentiators"][];
            meta?: components["schemas"]["x-metadata"];
          };
        };
      };
      401: components["responses"]["UnauthorizedError"];
    };
  };
  /**
   * Retrieve an Item
   * @description Retrieve a single differentiators item by unique identifier.
   */
  readSingleItemsDifferentiators: {
    parameters: {
      query?: {
        fields?: components["parameters"]["Fields"];
        meta?: components["parameters"]["Meta"];
        version?: components["parameters"]["Version"];
      };
      path: {
        /** @description Index of the item. */
        id: number | string;
      };
    };
    responses: {
      /** @description Successful request */
      200: {
        content: {
          "application/json": {
            data?: components["schemas"]["ItemsDifferentiators"];
          };
        };
      };
      401: components["responses"]["UnauthorizedError"];
      404: components["responses"]["NotFoundError"];
    };
  };
  /**
   * List Items
   * @description List the static_pages items.
   */
  readItemsStaticPages: {
    parameters: {
      query?: {
        fields?: components["parameters"]["Fields"];
        limit?: components["parameters"]["Limit"];
        meta?: components["parameters"]["Meta"];
        offset?: components["parameters"]["Offset"];
        sort?: components["parameters"]["Sort"];
        filter?: components["parameters"]["Filter"];
        search?: components["parameters"]["Search"];
      };
    };
    responses: {
      /** @description Successful request */
      200: {
        content: {
          "application/json": {
            data?: components["schemas"]["ItemsStaticPages"][];
            meta?: components["schemas"]["x-metadata"];
          };
        };
      };
      401: components["responses"]["UnauthorizedError"];
    };
  };
  /**
   * Retrieve an Item
   * @description Retrieve a single static_pages item by unique identifier.
   */
  readSingleItemsStaticPages: {
    parameters: {
      query?: {
        fields?: components["parameters"]["Fields"];
        meta?: components["parameters"]["Meta"];
        version?: components["parameters"]["Version"];
      };
      path: {
        /** @description Index of the item. */
        id: number | string;
      };
    };
    responses: {
      /** @description Successful request */
      200: {
        content: {
          "application/json": {
            data?: components["schemas"]["ItemsStaticPages"];
          };
        };
      };
      401: components["responses"]["UnauthorizedError"];
      404: components["responses"]["NotFoundError"];
    };
  };
  /**
   * List Items
   * @description List the section_capabilities items.
   */
  readItemsSectionCapabilities: {
    parameters: {
      query?: {
        fields?: components["parameters"]["Fields"];
        limit?: components["parameters"]["Limit"];
        meta?: components["parameters"]["Meta"];
        offset?: components["parameters"]["Offset"];
        sort?: components["parameters"]["Sort"];
        filter?: components["parameters"]["Filter"];
        search?: components["parameters"]["Search"];
      };
    };
    responses: {
      /** @description Successful request */
      200: {
        content: {
          "application/json": {
            data?: components["schemas"]["ItemsSectionCapabilities"][];
            meta?: components["schemas"]["x-metadata"];
          };
        };
      };
      401: components["responses"]["UnauthorizedError"];
    };
  };
  /**
   * Retrieve an Item
   * @description Retrieve a single section_capabilities item by unique identifier.
   */
  readSingleItemsSectionCapabilities: {
    parameters: {
      query?: {
        fields?: components["parameters"]["Fields"];
        meta?: components["parameters"]["Meta"];
        version?: components["parameters"]["Version"];
      };
      path: {
        /** @description Index of the item. */
        id: number | string;
      };
    };
    responses: {
      /** @description Successful request */
      200: {
        content: {
          "application/json": {
            data?: components["schemas"]["ItemsSectionCapabilities"];
          };
        };
      };
      401: components["responses"]["UnauthorizedError"];
      404: components["responses"]["NotFoundError"];
    };
  };
  /**
   * List Items
   * @description List the section_capabilities_capabilities items.
   */
  readItemsSectionCapabilitiesCapabilities: {
    parameters: {
      query?: {
        fields?: components["parameters"]["Fields"];
        limit?: components["parameters"]["Limit"];
        meta?: components["parameters"]["Meta"];
        offset?: components["parameters"]["Offset"];
        sort?: components["parameters"]["Sort"];
        filter?: components["parameters"]["Filter"];
        search?: components["parameters"]["Search"];
      };
    };
    responses: {
      /** @description Successful request */
      200: {
        content: {
          "application/json": {
            data?: components["schemas"]["ItemsSectionCapabilitiesCapabilities"][];
            meta?: components["schemas"]["x-metadata"];
          };
        };
      };
      401: components["responses"]["UnauthorizedError"];
    };
  };
  /**
   * Retrieve an Item
   * @description Retrieve a single section_capabilities_capabilities item by unique identifier.
   */
  readSingleItemsSectionCapabilitiesCapabilities: {
    parameters: {
      query?: {
        fields?: components["parameters"]["Fields"];
        meta?: components["parameters"]["Meta"];
        version?: components["parameters"]["Version"];
      };
      path: {
        /** @description Index of the item. */
        id: number | string;
      };
    };
    responses: {
      /** @description Successful request */
      200: {
        content: {
          "application/json": {
            data?: components["schemas"]["ItemsSectionCapabilitiesCapabilities"];
          };
        };
      };
      401: components["responses"]["UnauthorizedError"];
      404: components["responses"]["NotFoundError"];
    };
  };
  /**
   * List Items
   * @description List the capabilities items.
   */
  readItemsCapabilities: {
    parameters: {
      query?: {
        fields?: components["parameters"]["Fields"];
        limit?: components["parameters"]["Limit"];
        meta?: components["parameters"]["Meta"];
        offset?: components["parameters"]["Offset"];
        sort?: components["parameters"]["Sort"];
        filter?: components["parameters"]["Filter"];
        search?: components["parameters"]["Search"];
      };
    };
    responses: {
      /** @description Successful request */
      200: {
        content: {
          "application/json": {
            data?: components["schemas"]["ItemsCapabilities"][];
            meta?: components["schemas"]["x-metadata"];
          };
        };
      };
      401: components["responses"]["UnauthorizedError"];
    };
  };
  /**
   * Retrieve an Item
   * @description Retrieve a single capabilities item by unique identifier.
   */
  readSingleItemsCapabilities: {
    parameters: {
      query?: {
        fields?: components["parameters"]["Fields"];
        meta?: components["parameters"]["Meta"];
        version?: components["parameters"]["Version"];
      };
      path: {
        /** @description Index of the item. */
        id: number | string;
      };
    };
    responses: {
      /** @description Successful request */
      200: {
        content: {
          "application/json": {
            data?: components["schemas"]["ItemsCapabilities"];
          };
        };
      };
      401: components["responses"]["UnauthorizedError"];
      404: components["responses"]["NotFoundError"];
    };
  };
  /**
   * List Items
   * @description List the section_differentiators_differentiators items.
   */
  readItemsSectionDifferentiatorsDifferentiators: {
    parameters: {
      query?: {
        fields?: components["parameters"]["Fields"];
        limit?: components["parameters"]["Limit"];
        meta?: components["parameters"]["Meta"];
        offset?: components["parameters"]["Offset"];
        sort?: components["parameters"]["Sort"];
        filter?: components["parameters"]["Filter"];
        search?: components["parameters"]["Search"];
      };
    };
    responses: {
      /** @description Successful request */
      200: {
        content: {
          "application/json": {
            data?: components["schemas"]["ItemsSectionDifferentiatorsDifferentiators"][];
            meta?: components["schemas"]["x-metadata"];
          };
        };
      };
      401: components["responses"]["UnauthorizedError"];
    };
  };
  /**
   * Retrieve an Item
   * @description Retrieve a single section_differentiators_differentiators item by unique identifier.
   */
  readSingleItemsSectionDifferentiatorsDifferentiators: {
    parameters: {
      query?: {
        fields?: components["parameters"]["Fields"];
        meta?: components["parameters"]["Meta"];
        version?: components["parameters"]["Version"];
      };
      path: {
        /** @description Index of the item. */
        id: number | string;
      };
    };
    responses: {
      /** @description Successful request */
      200: {
        content: {
          "application/json": {
            data?: components["schemas"]["ItemsSectionDifferentiatorsDifferentiators"];
          };
        };
      };
      401: components["responses"]["UnauthorizedError"];
      404: components["responses"]["NotFoundError"];
    };
  };
  /**
   * List Items
   * @description List the case_studies items.
   */
  readItemsCaseStudies: {
    parameters: {
      query?: {
        fields?: components["parameters"]["Fields"];
        limit?: components["parameters"]["Limit"];
        meta?: components["parameters"]["Meta"];
        offset?: components["parameters"]["Offset"];
        sort?: components["parameters"]["Sort"];
        filter?: components["parameters"]["Filter"];
        search?: components["parameters"]["Search"];
      };
    };
    responses: {
      /** @description Successful request */
      200: {
        content: {
          "application/json": {
            data?: components["schemas"]["ItemsCaseStudies"][];
            meta?: components["schemas"]["x-metadata"];
          };
        };
      };
      401: components["responses"]["UnauthorizedError"];
    };
  };
  /**
   * Retrieve an Item
   * @description Retrieve a single case_studies item by unique identifier.
   */
  readSingleItemsCaseStudies: {
    parameters: {
      query?: {
        fields?: components["parameters"]["Fields"];
        meta?: components["parameters"]["Meta"];
        version?: components["parameters"]["Version"];
      };
      path: {
        /** @description Index of the item. */
        id: number | string;
      };
    };
    responses: {
      /** @description Successful request */
      200: {
        content: {
          "application/json": {
            data?: components["schemas"]["ItemsCaseStudies"];
          };
        };
      };
      401: components["responses"]["UnauthorizedError"];
      404: components["responses"]["NotFoundError"];
    };
  };
  /**
   * List Items
   * @description List the tours items.
   */
  readItemsTours: {
    parameters: {
      query?: {
        fields?: components["parameters"]["Fields"];
        limit?: components["parameters"]["Limit"];
        meta?: components["parameters"]["Meta"];
        offset?: components["parameters"]["Offset"];
        sort?: components["parameters"]["Sort"];
        filter?: components["parameters"]["Filter"];
        search?: components["parameters"]["Search"];
      };
    };
    responses: {
      /** @description Successful request */
      200: {
        content: {
          "application/json": {
            data?: components["schemas"]["ItemsTours"][];
            meta?: components["schemas"]["x-metadata"];
          };
        };
      };
      401: components["responses"]["UnauthorizedError"];
    };
  };
  /**
   * Retrieve an Item
   * @description Retrieve a single tours item by unique identifier.
   */
  readSingleItemsTours: {
    parameters: {
      query?: {
        fields?: components["parameters"]["Fields"];
        meta?: components["parameters"]["Meta"];
        version?: components["parameters"]["Version"];
      };
      path: {
        /** @description Index of the item. */
        id: number | string;
      };
    };
    responses: {
      /** @description Successful request */
      200: {
        content: {
          "application/json": {
            data?: components["schemas"]["ItemsTours"];
          };
        };
      };
      401: components["responses"]["UnauthorizedError"];
      404: components["responses"]["NotFoundError"];
    };
  };
  /**
   * List Items
   * @description List the section_case_studies_case_studies items.
   */
  readItemsSectionCaseStudiesCaseStudies: {
    parameters: {
      query?: {
        fields?: components["parameters"]["Fields"];
        limit?: components["parameters"]["Limit"];
        meta?: components["parameters"]["Meta"];
        offset?: components["parameters"]["Offset"];
        sort?: components["parameters"]["Sort"];
        filter?: components["parameters"]["Filter"];
        search?: components["parameters"]["Search"];
      };
    };
    responses: {
      /** @description Successful request */
      200: {
        content: {
          "application/json": {
            data?: components["schemas"]["ItemsSectionCaseStudiesCaseStudies"][];
            meta?: components["schemas"]["x-metadata"];
          };
        };
      };
      401: components["responses"]["UnauthorizedError"];
    };
  };
  /**
   * Retrieve an Item
   * @description Retrieve a single section_case_studies_case_studies item by unique identifier.
   */
  readSingleItemsSectionCaseStudiesCaseStudies: {
    parameters: {
      query?: {
        fields?: components["parameters"]["Fields"];
        meta?: components["parameters"]["Meta"];
        version?: components["parameters"]["Version"];
      };
      path: {
        /** @description Index of the item. */
        id: number | string;
      };
    };
    responses: {
      /** @description Successful request */
      200: {
        content: {
          "application/json": {
            data?: components["schemas"]["ItemsSectionCaseStudiesCaseStudies"];
          };
        };
      };
      401: components["responses"]["UnauthorizedError"];
      404: components["responses"]["NotFoundError"];
    };
  };
  /**
   * List Items
   * @description List the section_tours items.
   */
  readItemsSectionTours: {
    parameters: {
      query?: {
        fields?: components["parameters"]["Fields"];
        limit?: components["parameters"]["Limit"];
        meta?: components["parameters"]["Meta"];
        offset?: components["parameters"]["Offset"];
        sort?: components["parameters"]["Sort"];
        filter?: components["parameters"]["Filter"];
        search?: components["parameters"]["Search"];
      };
    };
    responses: {
      /** @description Successful request */
      200: {
        content: {
          "application/json": {
            data?: components["schemas"]["ItemsSectionTours"][];
            meta?: components["schemas"]["x-metadata"];
          };
        };
      };
      401: components["responses"]["UnauthorizedError"];
    };
  };
  /**
   * Retrieve an Item
   * @description Retrieve a single section_tours item by unique identifier.
   */
  readSingleItemsSectionTours: {
    parameters: {
      query?: {
        fields?: components["parameters"]["Fields"];
        meta?: components["parameters"]["Meta"];
        version?: components["parameters"]["Version"];
      };
      path: {
        /** @description Index of the item. */
        id: number | string;
      };
    };
    responses: {
      /** @description Successful request */
      200: {
        content: {
          "application/json": {
            data?: components["schemas"]["ItemsSectionTours"];
          };
        };
      };
      401: components["responses"]["UnauthorizedError"];
      404: components["responses"]["NotFoundError"];
    };
  };
  /**
   * List Items
   * @description List the section_case_studies items.
   */
  readItemsSectionCaseStudies: {
    parameters: {
      query?: {
        fields?: components["parameters"]["Fields"];
        limit?: components["parameters"]["Limit"];
        meta?: components["parameters"]["Meta"];
        offset?: components["parameters"]["Offset"];
        sort?: components["parameters"]["Sort"];
        filter?: components["parameters"]["Filter"];
        search?: components["parameters"]["Search"];
      };
    };
    responses: {
      /** @description Successful request */
      200: {
        content: {
          "application/json": {
            data?: components["schemas"]["ItemsSectionCaseStudies"][];
            meta?: components["schemas"]["x-metadata"];
          };
        };
      };
      401: components["responses"]["UnauthorizedError"];
    };
  };
  /**
   * Retrieve an Item
   * @description Retrieve a single section_case_studies item by unique identifier.
   */
  readSingleItemsSectionCaseStudies: {
    parameters: {
      query?: {
        fields?: components["parameters"]["Fields"];
        meta?: components["parameters"]["Meta"];
        version?: components["parameters"]["Version"];
      };
      path: {
        /** @description Index of the item. */
        id: number | string;
      };
    };
    responses: {
      /** @description Successful request */
      200: {
        content: {
          "application/json": {
            data?: components["schemas"]["ItemsSectionCaseStudies"];
          };
        };
      };
      401: components["responses"]["UnauthorizedError"];
      404: components["responses"]["NotFoundError"];
    };
  };
  /**
   * List Items
   * @description List the section_tours_tours items.
   */
  readItemsSectionToursTours: {
    parameters: {
      query?: {
        fields?: components["parameters"]["Fields"];
        limit?: components["parameters"]["Limit"];
        meta?: components["parameters"]["Meta"];
        offset?: components["parameters"]["Offset"];
        sort?: components["parameters"]["Sort"];
        filter?: components["parameters"]["Filter"];
        search?: components["parameters"]["Search"];
      };
    };
    responses: {
      /** @description Successful request */
      200: {
        content: {
          "application/json": {
            data?: components["schemas"]["ItemsSectionToursTours"][];
            meta?: components["schemas"]["x-metadata"];
          };
        };
      };
      401: components["responses"]["UnauthorizedError"];
    };
  };
  /**
   * Retrieve an Item
   * @description Retrieve a single section_tours_tours item by unique identifier.
   */
  readSingleItemsSectionToursTours: {
    parameters: {
      query?: {
        fields?: components["parameters"]["Fields"];
        meta?: components["parameters"]["Meta"];
        version?: components["parameters"]["Version"];
      };
      path: {
        /** @description Index of the item. */
        id: number | string;
      };
    };
    responses: {
      /** @description Successful request */
      200: {
        content: {
          "application/json": {
            data?: components["schemas"]["ItemsSectionToursTours"];
          };
        };
      };
      401: components["responses"]["UnauthorizedError"];
      404: components["responses"]["NotFoundError"];
    };
  };
  /**
   * List Items
   * @description List the tours_ctas items.
   */
  readItemsToursCtas: {
    parameters: {
      query?: {
        fields?: components["parameters"]["Fields"];
        limit?: components["parameters"]["Limit"];
        meta?: components["parameters"]["Meta"];
        offset?: components["parameters"]["Offset"];
        sort?: components["parameters"]["Sort"];
        filter?: components["parameters"]["Filter"];
        search?: components["parameters"]["Search"];
      };
    };
    responses: {
      /** @description Successful request */
      200: {
        content: {
          "application/json": {
            data?: components["schemas"]["ItemsToursCtas"][];
            meta?: components["schemas"]["x-metadata"];
          };
        };
      };
      401: components["responses"]["UnauthorizedError"];
    };
  };
  /**
   * Retrieve an Item
   * @description Retrieve a single tours_ctas item by unique identifier.
   */
  readSingleItemsToursCtas: {
    parameters: {
      query?: {
        fields?: components["parameters"]["Fields"];
        meta?: components["parameters"]["Meta"];
        version?: components["parameters"]["Version"];
      };
      path: {
        /** @description Index of the item. */
        id: number | string;
      };
    };
    responses: {
      /** @description Successful request */
      200: {
        content: {
          "application/json": {
            data?: components["schemas"]["ItemsToursCtas"];
          };
        };
      };
      401: components["responses"]["UnauthorizedError"];
      404: components["responses"]["NotFoundError"];
    };
  };
}
